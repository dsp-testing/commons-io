# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master", "aibaars/test-proxy" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '38 22 * * 2'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # Setup dependabot proxy.
    - name: Setup dependabot proxy
      id: proxy
      uses: github/codeql-action/start-proxy@aibaars/start-proxy
      with:
        registry_secrets: ${{ secrets.DEPENDABOT_CREDENTIALS || vars.DEPENDABOT_CREDENTIALS }}

    - name: Test proxy
      run: |
        echo "${{ steps.proxy.outputs.proxy_ca_certificate }}" > "${RUNNER_TEMP}/cacert.pem"
        curl --proxy "http://${{ steps.proxy.outputs.proxy_host }}:${{ steps.proxy.outputs.proxy_port }}" \
             --cacert "${RUNNER_TEMP}/cacert.pem" \
             --proxy-user "proxy_user:${{ steps.proxy.outputs.proxy_password }}" \
             -i  https://nu.nl

    - name: Setup Java buildless to use proxy
      run: |
       TRUST_STORE="$(mktemp -p ${RUNNER_TEMP} -d)/cacerts.p12"
       echo "${PROXY_CA_CERTIFICATE}" | keytool -importcert  -noprompt -alias proxy -keystore "${TRUST_STORE}" -storetype pkcs12 -storepass changeit 
       JAVA_SSL_OPTS="-Djavax.net.ssl.trustStore=${TRUST_STORE} -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit"
       JAVA_PROXY_OPTS="-Dhttp.proxyHost=${PROXY_HOST} -Dhttp.proxyPort=${PROXY_PORT} -Dhttp.proxyUser=proxy_user -Dhttp.proxyPassword=${PROXY_PASSWORD} -Dhttp.proxyHost=${PROXY_HOST} -Dhttps.proxyPort=${PROXY_PORT} -Dhttps.proxyUser=proxy_user -Dhttps.proxyPassword=${PROXY_PASSWORD}"
       mkdir -p "${HOME}/.m2"
       echo "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.2.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 
              xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd\">\
               <proxies>
                 <proxy><protocol>http</protocol><host>${PROXY_HOST}</host><port>${PROXY_PORT}</port><username>proxy_user</username><password>${PROXY_PASSWORD}</password></proxy>
                 <proxy><protocol>https</protocol><host>${PROXY_HOST}</host><port>${PROXY_PORT}</port><username>proxy_user</username><password>${PROXY_PASSWORD}</password></proxy>
               </proxies>
             </settings>" > "${HOME}/.m2/settings.xml"
       echo "MAVEN_OPTS=${JAVA_SSL_OPTS} ${MAVEN_OPTS}" >> "$GITHUB_ENV"
       echo "GRADLE_OPTS=${JAVA_SSL_OPTS} ${JAVA_PROXY_OPTS} ${GRADLE_OPTS}" >> "$GITHUB_ENV"
       echo "CODEQL_JAVA_EXTRACTOR_TRUST_STORE_PATH=${TRUST_STORE}" >> "$GITHUB_ENV"
       echo "SEMMLE_JAVA_EXTRACTOR_JVM_ARGS=-Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStorePassword=changeit" >> "$GITHUB_ENV"
      env:
        PROXY_HOST: ${{ steps.proxy.outputs.proxy_host }}
        PROXY_PORT: ${{ steps.proxy.outputs.proxy_port }}
        PROXY_PASSWORD: ${{ steps.proxy.outputs.proxy_password }}
        PROXY_CA_CERTIFICATE: ${{ steps.proxy.outputs.proxy_ca_certificate }}

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: false
